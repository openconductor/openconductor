// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  createdTeams  Team[]
  teams         TeamMember[]
  agents        Agent[]
  workflows     Workflow[]
  blocks        Block[]
  runs          Run[]
  integration   Integration[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Teams

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator     User          @relation(fields: [creatorId], references: [id])
  creatorId   String
  members     TeamMember[]
  workflows   Workflow[]
  agents      Agent[]
  integration Integration[]
}

model TeamMember {
  id        String   @id @default(cuid())
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Workflow {
  id        String  @id @default(cuid())
  name      String
  input     Json?
  output    Json?
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  creator   User    @relation(fields: [creatorId], references: [id])
  creatorId String
  blocks    Block[]
  runs      Run[]
}

model Block {
  id         String   @id @default(cuid())
  name       String
  order      Int
  input      String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
  agent      Agent    @relation(fields: [agentId], references: [id])
  agentId    String
  creator    User     @relation(fields: [creatorId], references: [id])
  creatorId  String
  events     Event[]
}

model Run {
  id         String    @id @default(cuid())
  temporalId String
  input      String?
  output     String?
  status     String
  startedAt  DateTime?
  endedAt    DateTime?
  workflow   Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
  creator    User      @relation(fields: [creatorId], references: [id])
  creatorId  String
  events     Event[]
}

model Event {
  id        String    @id @default(cuid())
  output    String?
  status    String
  startedAt DateTime?
  endedAt   DateTime?
  tokens    Int?
  run       Run       @relation(fields: [runId], references: [id], onDelete: Cascade)
  runId     String
  block     Block     @relation(fields: [blockId], references: [id], onDelete: Cascade)
  blockId   String
}

enum Agents {
  EXTRACT
  TRANSFORM
  LOAD
  SCHEDULE
}

model Agent {
  id             String      @id @default(cuid())
  name           String
  description    String?
  type           Agents      @default(TRANSFORM)
  input          String?
  output         String?
  systemTemplate String?
  promptTemplate String?
  isPublic       Boolean
  integration    Integration @relation(fields: [integrationId], references: [id])
  integrationId  String
  team           Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId         String
  creator        User        @relation(fields: [creatorId], references: [id])
  creatorId      String
  blocks         Block[]
}

enum Integrations {
  OPENCONDUCTOR
  OPENAI
  GITHUB
  SUPABASE
  S3
}

model Integration {
  id        String       @id @default(cuid())
  type      Integrations @default(OPENCONDUCTOR)
  authId    String?
  authToken String?
  team      Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  creator   User         @relation(fields: [creatorId], references: [id])
  creatorId String
  agents    Agent[]
}

model Document {
  id      String                 @id @default(cuid())
  content String
  source  String
  type    String
  vector  Unsupported("vector")?
}
