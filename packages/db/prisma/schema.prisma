// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../types"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = [vector]
}

// enable pgvector https://github.com/prisma/prisma/issues/18442

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "extensions")]
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  username      String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  createdTeams  Team[]
  teams         TeamMember[]
  agents        Agent[]
  blocks        Block[]
  runs          Run[]
  plugins       Plugin[]
  documents     Document[]
  Message       Message[]
  Source        Source[]
  AiAgent       AiAgent[]
}

// Teams

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User         @relation(fields: [creatorId], references: [id])
  creatorId String
  members   TeamMember[]
  agents    Agent[]
  plugins   Plugin[]
  documents Document[]
  Message   Message[]
  Source    Source[]
  AiAgent   AiAgent[]
}

model TeamMember {
  id        String   @id @default(cuid())
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

// Orchestration

model Agent {
  id         String   @id @default(cuid())
  name       String
  prompt     String?
  input      Json?
  output     Json?
  playground Boolean  @default(false)
  conductor  Boolean  @default(false)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  creator    User     @relation(fields: [creatorId], references: [id])
  creatorId  String
  blocks     Block[]
  runs       Run[]
  plugins    Plugin[]
}

model Block {
  id        String  @id @default(cuid())
  name      String
  order     Int
  input     String
  agent     Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   String
  creator   User    @relation(fields: [creatorId], references: [id])
  creatorId String
  events    Event[]
}

model Run {
  id         String    @id @default(cuid())
  temporalId String
  input      String?
  output     String?
  status     String
  startedAt  DateTime?
  endedAt    DateTime?
  agent      Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId    String
  creator    User      @relation(fields: [creatorId], references: [id])
  creatorId  String
  events     Event[]
}

model Event {
  id        String    @id @default(cuid())
  output    String?
  status    String
  startedAt DateTime?
  endedAt   DateTime?
  tokens    Int?
  run       Run       @relation(fields: [runId], references: [id], onDelete: Cascade)
  runId     String
  block     Block     @relation(fields: [blockId], references: [id], onDelete: Cascade)
  blockId   String
}

enum Plugins {
  GITHUB
  SERP
  CALCULATOR
  OPENCONDUCTOR
  FILESYSTEM
  GIT
}

model Plugin {
  id        String  @id @default(cuid())
  type      Plugins @default(GITHUB)
  authId    String?
  authToken String?
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  creator   User    @relation(fields: [creatorId], references: [id])
  creatorId String
  agents    Agent[]
}

enum DocumentTypes {
  GITHUB
  MEMORY
}

model Document {
  id        String                 @id @default(cuid())
  content   String
  source    String
  type      DocumentTypes          @default(GITHUB)
  embedding Unsupported("vector")?
  team      Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  creator   User                   @relation(fields: [creatorId], references: [id])
  creatorId String
}

enum MessageType {
  TRIAGE
  REVIEW
  COMMENT
}

model Message {
  id                String                      @id @default(cuid())
  sourceReferenceId String
  type              MessageType
  key               String
  title             String
  body              String
  url               String?
  state             String?
  createdAt         DateTime
  embedding         Unsupported("vector(384)")?

  source   Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId String

  aiAgent   AiAgent @relation(fields: [aiAgentId], references: [id], onDelete: Cascade)
  aiAgentId String

  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  parentId String?   @map("parent_id")
  children Message[] @relation("MessageToMessage")
  parent   Message?  @relation("MessageToMessage", fields: [parentId], references: [id])

  labels Label[]

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  aiItems   AiItem[]

  @@unique([sourceId, sourceReferenceId])
}

enum AuthorType {
  GITHUB_BOT
  GITHUB_USER
}

model Author {
  id       String     @id @default(cuid())
  type     AuthorType
  typeId   String
  imageUrl String?
  handle   String
  url      String?
  messages Message[]
  sources  Source[]
  aiAgents AiAgent[]

  @@unique([type, typeId])
}

model Label {
  id                String    @id @default(cuid())
  name              String
  sourceReferenceId String
  description       String?
  createdAt         DateTime
  color             String?
  messages          Message[]

  source   Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId String

  aiAgent   AiAgent @relation(fields: [aiAgentId], references: [id], onDelete: Cascade)
  aiAgentId String

  @@unique([sourceId, sourceReferenceId])
}

enum AiItemType {
  SUMMARY
}

model AiItem {
  id        String     @id @default(cuid())
  type      AiItemType
  prompt    String?
  response  Json?
  tokens    Int?
  cost      Int?
  createdAt DateTime
  updatedAt DateTime?

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?

  @@unique([type, messageId])
}

enum SourceType {
  GITHUB_REPO
}

model Source {
  id          String     @id @default(cuid())
  type        SourceType
  sourceId    String
  name        String
  url         String
  imageUrl    String?
  description String?
  enabled     Boolean?
  messages    Message[]

  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Label     Label[]
  Author    Author?  @relation(fields: [authorId], references: [id])
  authorId  String?

  @@unique([type, sourceId])
}

enum AiAgentType {
  GITHUB_REPO
}

model AiAgent {
  id          String     @id @default(cuid())
  type        AiAgentType
  aiAgentId   String
  name        String
  url         String
  imageUrl    String?
  description String?
  enabled     Boolean?
  messages    Message[]

  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Label     Label[]
  Author    Author?  @relation(fields: [authorId], references: [id])
  authorId  String?

  @@unique([type, aiAgentId])
}